AC_LANG_CPLUSPLUS

AX_BOOST_BASE([1.53])
AX_BOOST_ASIO
AX_BOOST_REGEX

AC_CHECK_LIB([boost_system], [main], [], [])

AC_CHECK_LIB([boost_regex], [main], [], [])

AC_ARG_WITH(isa,
	[AS_HELP_STRING([--with-isa=RV64IMAFDC],
		[Sets the default RISC-V ISA])],
  AC_DEFINE_UNQUOTED([DEFAULT_ISA], "$withval", [Default value for --isa switch]),
  AC_DEFINE_UNQUOTED([DEFAULT_ISA], "RV64IMAFDC", [Default value for --isa switch]))

AC_ARG_WITH(priv,
	[AS_HELP_STRING([--with-priv=MSU],
		[Sets the default RISC-V privilege modes supported])],
  AC_DEFINE_UNQUOTED([DEFAULT_PRIV], "$withval", [Default value for --priv switch]),
  AC_DEFINE_UNQUOTED([DEFAULT_PRIV], "MSU", [Default value for --priv switch]))

AC_ARG_WITH(varch,
	[AS_HELP_STRING([--with-varch=vlen:128,elen:64],
		[Sets the default vector config])],
  AC_DEFINE_UNQUOTED([DEFAULT_VARCH], "$withval", [Default value for --varch switch]),
  AC_DEFINE_UNQUOTED([DEFAULT_VARCH], ["vlen:128,elen:64"], [Default value for --varch switch]))

AC_ARG_WITH(target,
	[AS_HELP_STRING([--with-target=riscv64-unknown-elf],
		[Sets the default target config])],
  AC_DEFINE_UNQUOTED([TARGET_ARCH], "$withval", [Default value for --target switch]),
  AC_DEFINE_UNQUOTED([TARGET_ARCH], ["riscv64-unknown-elf"], [Default value for --target switch]))

AC_SEARCH_LIBS([dlopen], [dl dld], [
  AC_DEFINE([HAVE_DLOPEN], [], [Dynamic library loading is supported])
  AC_SUBST([HAVE_DLOPEN], [yes])
])

AC_CHECK_LIB(pthread, pthread_create, [], [AC_MSG_ERROR([libpthread is required])])

AC_ARG_ENABLE([commitlog], AS_HELP_STRING([--enable-commitlog], [Enable commit log generation]))
AS_IF([test "x$enable_commitlog" = "xyes"], [
  AC_DEFINE([RISCV_ENABLE_COMMITLOG],,[Enable commit log generation])
])

AC_ARG_ENABLE([histogram], AS_HELP_STRING([--enable-histogram], [Enable PC histogram generation]))
AS_IF([test "x$enable_histogram" = "xyes"], [
  AC_DEFINE([RISCV_ENABLE_HISTOGRAM],,[Enable PC histogram generation])
])

AC_ARG_ENABLE([dirty], AS_HELP_STRING([--enable-dirty], [Enable hardware management of PTE accessed and dirty bits]))
AS_IF([test "x$enable_dirty" = "xyes"], [
  AC_DEFINE([RISCV_ENABLE_DIRTY],,[Enable hardware management of PTE accessed and dirty bits])
])

AC_ARG_ENABLE([misaligned], AS_HELP_STRING([--enable-misaligned], [Enable hardware support for misaligned loads and stores]))
AS_IF([test "x$enable_misaligned" = "xyes"], [
  AC_DEFINE([RISCV_ENABLE_MISALIGNED],,[Enable hardware support for misaligned loads and stores])
])

AC_ARG_ENABLE([dual-endian], AS_HELP_STRING([--enable-dual-endian], [Enable support for running target in either endianness]))
AS_IF([test "x$enable_dual_endian" = "xyes"], [
  AC_DEFINE([RISCV_ENABLE_DUAL_ENDIAN],,[Enable support for running target in either endianness])
])

AC_ARG_ENABLE([vector-mask-agnostic-overwrite], AS_HELP_STRING([--enable-vector-mask-agnostic-overwrite], [Enable vector mask agnostic overwriting]))
AS_IF([test "x$enable_vector_mask_agnostic_overwrite" = "xyes"], [
  AC_DEFINE([RISCV_ENABLE_VECTOR_MASK_AGNOSTIC_OVERWRITE],,[Enable vector mask agnostic overwriting])
])

AC_ARG_ENABLE([vector-tail-agnostic-overwrite], AS_HELP_STRING([--enable-vector-tail-agnostic-overwrite], [Enable vector tail agnostic overwriting]))
AS_IF([test "x$enable_vector_tail_agnostic_overwrite" = "xyes"], [
  AC_DEFINE([RISCV_ENABLE_VECTOR_TAIL_AGNOSTIC_OVERWRITE],,[Enable vector tail agnostic overwriting])
])

AC_ARG_ENABLE([vector-reset-vr-to-all-ones], AS_HELP_STRING([--enable-vector-reset-vr-to-all-ones], [Reset vector register to all ones]))
AS_IF([test "x$enable_vector_reset_vr_to_all_ones" = "xyes"], [
  AC_DEFINE([RISCV_VECTOR_RESET_VR_TO_ALL_ONES],,[Reset vector register to all ones])
])